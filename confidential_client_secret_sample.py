"""
The configuration file would look like this (sans those // comments):

{
    "authority": "https://login.microsoftonline.com/Enter_the_Tenant_Name_Here",
    "client_id": "your_client_id",
    "scope": ["https://graph.microsoft.com/.default"],
        // For more information about scopes for an app, refer:
        // https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow#second-case-access-token-request-with-a-certificate"

    "secret": "The secret generated by AAD during your confidential app registration",
        // For information about generating client secret, refer:
        // https://github.com/AzureAD/microsoft-authentication-library-for-python/wiki/Client-Credentials#registering-client-secrets-using-the-application-registration-portal

    "endpoint": "https://graph.microsoft.com/v1.0/users"

}

You can then run this sample with a JSON configuration file:

    python sample.py parameters.json
"""

import sys  # For simplicity, we'll read config file from 1st CLI param sys.argv[1]
import json
import logging
import base64
import os
from datetime import datetime
import pytz
import requests
import msal


# Optional logging
# logging.basicConfig(level=logging.DEBUG)

config = json.load(open("gpt_parameters.json"))

# Create a preferably long-lived app instance which maintains a token cache.
app = msal.ConfidentialClientApplication(
    config["client_id"], authority=config["authority"],
    client_credential=config["secret"],
    # token_cache=...  # Default cache is in memory only.
                       # You can learn how to use SerializableTokenCache from
                       # https://msal-python.rtfd.io/en/latest/#msal.SerializableTokenCache
    )

# The pattern to acquire a token looks like this.
result = None

# Firstly, looks up a token from cache
# Since we are looking for token for the current app, NOT for an end user,
# notice we give account parameter as None.
result = app.acquire_token_silent(config["scope"], account=None)

if not result:
    logging.info("No suitable token exists in cache. Let's get a new one from AAD.")
    result = app.acquire_token_for_client(scopes=config["scope"])

if "access_token" in result:
    # Calling graph using the access token
    # graph_data = requests.get(  # Use token to call downstream service
    #     config["endpoint"],
    #     headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()
    # query = "https://graph.microsoft.com/v1.0/users/8834aa18-e05d-4b31-b764-09cc68f78914/messages"
    flag = 0
    while 1:
        if flag == 0:
            query1 = "https://graph.microsoft.com/v1.0/users/mediclaim.ils.dumdum@gptgroup.co.in/mailFolders/inbox/messages?$filter=(receivedDateTime ge 2021-01-20T10:56:44Z) and (receivedDateTime le 2021-01-20T10:57:14Z)"
        flag = 1
        graph_data2 = requests.get(query1,
            headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()
        for i in graph_data2['value']:
            format = "%Y-%m-%dT%H:%M:%SZ"
            b = datetime.strptime(i['receivedDateTime'], format).replace(tzinfo=pytz.utc).astimezone(pytz.timezone('Asia/Kolkata')).replace(
                tzinfo=None)
            print(i['receivedDateTime'], b, i['subject'])
            print(i['sender']['emailAddress']['address'])
            if 'hasAttachments' in i:
                q = f"https://graph.microsoft.com/v1.0/users/ilsmediclaim@gptgroup.co.in/mailFolders/inbox/messages/{i['id']}/attachments"
                attach_data = requests.get(q,
                             headers={'Authorization': 'Bearer ' + result['access_token']}, ).json()
                for j in attach_data['value']:
                    if '@odata.mediaContentType' in j:
                        print(j['@odata.mediaContentType'], j['name'])
                        with open(os.path.join('new_attach', j['name']), 'w+b') as fp:
                            fp.write(base64.b64decode(j['contentBytes']))
                            print('wrote', j['name'])
                pass
        if '@odata.nextLink' not in graph_data2:
            break
        query1 = graph_data2['@odata.nextLink']
    # print("Graph API call result: ")
    # print(json.dumps(graph_data2, indent=2))
    # print(json.dumps(graph_data, indent=2))
else:
    print(result.get("error"))
    print(result.get("error_description"))
    print(result.get("correlation_id"))  # You may need this when reporting a bug

